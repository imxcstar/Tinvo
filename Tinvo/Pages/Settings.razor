@page "/settings"
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Tinvo.Abstractions.AIScheduler
@using Tinvo.Application.AIAssistant
@using Tinvo.Application.DataStorage
@implements IDisposable
@inject ISnackbar _snackbar
@inject IJSRuntime _js
@inject IDataStorageServiceFactory _dataStorageConfigServiceFactory
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager
@inject AIAssistantService _aiAssistantService

<MudStack Row="false" Style="height: 100%;" Class="pa-5" AlignItems="AlignItems.Center">
    <MudExpansionPanels Style="width: 350px" MultiExpansion="true">
        <MudExpansionPanel Text="聊天记录" Expanded="true">
            <MudStack Row="true">
                <MudFileUpload T="IBrowserFile" FilesChanged="ImportChatHistory" Accept=".json">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled">导入</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportChatHistory">
                    导出
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CleanChatHistory">
                    清空
                </MudButton>
            </MudStack>
        </MudExpansionPanel>
        <MudExpansionPanel Text="助手" Expanded="true">
            <MudStack Row="true">
                <MudFileUpload T="IBrowserFile" FilesChanged="ImportAssistantHistory" Accept=".json">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled">导入</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportAssistantHistory">
                    导出
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CleanAssistantHistory">
                    清空
                </MudButton>
            </MudStack>
        </MudExpansionPanel>
        <MudExpansionPanel Text="数据存储" Expanded="true">
            <MudStack Row="false" Spacing="4">
                <MudRadioGroup @bind-Value="_dataStorageSetting.Type">
                    <MudRadio Value="DataStorageType.Local">本地存储</MudRadio>
                    <MudRadio Value="DataStorageType.WebDav">WebDav</MudRadio>
                </MudRadioGroup>

                @if (_dataStorageSetting.Type == DataStorageType.WebDav)
                {
                    <MudTextField @bind-Value="_dataStorageSetting.WebDavURI" Label="WebDav 地址" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="_dataStorageSetting.WebDavUserName" Label="WebDav 用户名" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="_dataStorageSetting.WebDavPassword" Label="WebDav 密码" InputType="InputType.Password" Variant="Variant.Outlined" Margin="Margin.Dense" />
                }

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveDataStorageSettings" Class="mt-4">
                    保存
                </MudButton>
            </MudStack>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudStack>

@code {
    private bool isBrowser;
    private DataStorageSettingInfo _dataStorageSetting = new();
    private IDataStorageService _dataStorageService;

    protected override async Task OnInitializedAsync()
    {
        _dataStorageSetting = await _dataStorageConfigServiceFactory.GetConfigAsync();
        await base.OnInitializedAsync();
    }

    private void GoHome()
    {
        _navigationManager.NavigateTo("/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dataStorageService = await _dataStorageConfigServiceFactory.CreateAsync();
            isBrowser = OperatingSystem.IsBrowser();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SaveDataStorageSettings()
    {
        try
        {
            await _dataStorageConfigServiceFactory.SaveConfigAsync(_dataStorageSetting);
            _snackbar.Add("存储设置已保存！", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"保存失败: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ImportChatHistory(IBrowserFile file)
    {
        try
        {
            using var stream = file.OpenReadStream(100 * 1024 * 1024);
            var serializerOptions = new JsonSerializerOptions();
            serializerOptions.Converters.Add(new IAIChatHandleMessageConverter());
            var data = await JsonSerializer.DeserializeAsync<List<MsgCacheInfo>>(stream, serializerOptions);
            await _dataStorageService.SetItemAsync("msgCache", data);
            _snackbar.Add("导入成功！", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error, config => { config.RequireInteraction = true; });
        }
    }

    private async Task ExportChatHistory()
    {
        try
        {
            var ret = await _dataStorageService.GetItemAsync<List<MsgCacheInfo>>("msgCache");
            var serializerOptions = new JsonSerializerOptions();
            serializerOptions.Converters.Add(new IAIChatHandleMessageConverter());
            using var streamRef = new DotNetStreamReference(new MemoryStream(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(ret, serializerOptions))));
            await _js.InvokeVoidAsync("blazorHelper.DownloadFileFromStream", "msgCache.json", streamRef);
            _snackbar.Add("导出成功！", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error, config => { config.RequireInteraction = true; });
        }
    }

    private async Task CleanChatHistory()
    {
        try
        {
            var ret = await _dialogService.ShowMessageBox(
                "警告",
                "确认清空聊天记录吗？",
                yesText: "确认", cancelText: "取消");
            if (ret != null && ret.Value)
            {
                await _dataStorageService.RemoveItemAsync("msgCache");
                _snackbar.Add("清空成功！", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error, config => { config.RequireInteraction = true; });
        }
    }

    private async Task ImportAssistantHistory(IBrowserFile file)
    {
        try
        {
            using var stream = file.OpenReadStream(100 * 1024 * 1024);
            await _aiAssistantService.InitAsync();
            await _aiAssistantService.ImportAsync(stream);
            _snackbar.Add("导入成功！", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error, config => { config.RequireInteraction = true; });
        }
    }

    private async Task ExportAssistantHistory()
    {
        try
        {
            await _aiAssistantService.InitAsync();
            using var streamRef = new DotNetStreamReference(new MemoryStream(Encoding.UTF8.GetBytes(_aiAssistantService.ExportJsonText())));
            await _js.InvokeVoidAsync("blazorHelper.DownloadFileFromStream", "assistant.json", streamRef);
            _snackbar.Add("导出成功！", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error, config => { config.RequireInteraction = true; });
        }
    }

    private async Task CleanAssistantHistory()
    {
        try
        {
            var ret = await _dialogService.ShowMessageBox(
                "警告",
                "确认清空聊天记录吗？",
                yesText: "确认", cancelText: "取消");
            if (ret != null && ret.Value)
            {
                await _aiAssistantService.InitAsync();
                await _aiAssistantService.RemoveAllAssistantAsync();
                _snackbar.Add("清空成功！", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error, config => { config.RequireInteraction = true; });
        }
    }

    public void Dispose()
    {
    }
}