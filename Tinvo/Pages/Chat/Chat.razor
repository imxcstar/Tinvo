@page "/"
@implements IDisposable
@layout MainLayout

@using Tinvo.Pages.Chat.Component.ChatMsgList

@inject ISnackbar _snackbar
@inject IChatService _chatService
@inject IJSRuntime _js
@inject NavigationManager _navigationManager

<PageTitle>TinvoAI-聊天</PageTitle>

<style>
    .send-msg-button {
        width: 180px;
    }

    .send-msg-button span::before {
        content: "发送(Enter)";
    }

    .kbs-setting-view {
        width: 75vw !important;
    }


    .kbs-view {
        width: 25vw !important;
    }

    .chat-history-show {
        display: none;
    }

    @@media only screen and (max-width: 599px) {
        .chat-title {
            max-width: 50px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .chat-history-show {
            display: block;
        }
    }

    @@media only screen and (max-width: 959px) {
        .send-msg-button {
            width: 80px;
        }

        .send-msg-button span::before {
            content: "发送";
        }

        .chat-history-show {
            display: block;
        }
    }

    .kbs-setting-add-file .mud-input-control-input-container {
        height: 100%;
    }

    /* Style for the selected files container */
    .selected-files-container {
        overflow-x: auto; /* Horizontal scroll */
        white-space: nowrap; /* Keep chips in one line */
        background-color: transparent;
        flex-shrink: 0; /* Prevent container from shrinking in flex layout */
    }

    /* Style for the text area container to take remaining space */
    .input-area-container {
        flex-grow: 1; /* Take available vertical space */
        display: flex;
        flex-direction: column;
        min-height: 0; /* Important for flex children in some browsers like Firefox */
    }

    .input-msg-textarea-container {
        height: 100%; /* Fill parent (input-area-container's MudStack) */
        display: flex;
        flex-direction: column;
    }

    .input-msg-textarea {
        flex-grow: 1; /* Textarea takes available space */
        width: 100%;
        border: none;
        resize: none;
        outline: none;
        overflow-y: scroll;
        font-size: initial;
    }

    .send-button-container {
        flex-shrink: 0; /* Prevent button container from shrinking */
    }

</style>

<MudStack Row="true" Style="height: 100%;" Justify="Justify.FlexStart"
           Class="pa-3"
          AlignItems="AlignItems.Stretch" StretchItems="StretchItems.End" Spacing="0">
    <MudPaper Class="@(_isShowChatHistory ? "" : "d-none " + "d-md-flex d-lg-flex d-xl-flex d-xxl-flex pr-1")"
              Height="100%" MaxWidth="350px" Width="350px" Style="overflow: hidden;background-color: transparent;">
        <MudStack Style="width: 100%" Row="true" StretchItems="StretchItems.All" Justify="Justify.FlexStart"
                  AlignItems="AlignItems.Start">
            <MudStack Spacing="0" Style=" height: 100%;" Class="pb-3">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="pl-3 pt-3" Spacing="1"
                          Row="true">
                    <MudText>会话记录</MudText>
                    <MudTooltip Text="新建聊天">
                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="NewMsgGroup"
                                       Disabled="@(!string.IsNullOrWhiteSpace(searchChatMsgGroupName))"></MudIconButton>
                    </MudTooltip>
                </MudStack>
                <MudStack Class="pl-3 pt-1 pr-3 pb-2">
                    <MudTextField @bind-Value="@searchChatMsgGroupName" AdornmentIcon="@Icons.Material.Filled.Search"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined"
                                  Margin="Margin.Dense"/>
                </MudStack>
                <MudPaper Elevation="0"
                          Style="flex: 1;overflow-y:scroll;overflow-x:hidden;background-color: transparent;"
                          Class="sbc pl-2 pr-1 msg-history-group">
                    @if (isLoadingMsgGroupList)
                    {
                        @for (int i = 0; i < 30; i++)
                        {
                            <MudStack Spacing="1" Style="@("margin-top: 3px;" + _mr)">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px"/>
                                <MudSkeleton/>
                            </MudStack>
                        }
                    }
                    else
                    {
                        @foreach (var chatHistory in _chatService.MsgGroupList)
                        {
                            @if (!string.IsNullOrWhiteSpace(searchChatMsgGroupName) &&
                                 !chatHistory.Title.Contains(searchChatMsgGroupName))
                            {
                                continue;
                            }

                            <MudStack Spacing="0" Style="@("margin-top: 3px;" + _mr)">
                                <div style="height: 50px"
                                     class="@($"chatHistoryGradual {(((selectMsgGroup != null && chatHistory.Id == selectMsgGroup.Id) || (selectMsgGroup == null && string.IsNullOrWhiteSpace(chatHistory.Id))) ? "chatHistoryGradual-select" : "")}")"
                                     @onclick="@(async () => { await GetMsgList(chatHistory); })">
                                    <MudStack Row="true" Style="height: 100%" AlignItems="AlignItems.Center"
                                              Class="pl-6 pr-6">
                                        <MudText>@chatHistory.Title</MudText>
                                        <MudSpacer/>
                                    </MudStack>
                                </div>
                                <MudDivider Class="mt-1"/>
                            </MudStack>
                        }
                    }
                </MudPaper>
                @if (isShowLoadGroupLoading)
                {
                    <MudStack Spacing="1" Style="margin-top: 3px" AlignItems="AlignItems.Center">
                        <MudProgressCircular Size="Size.Medium" Color="Color.Info" Indeterminate="true"/>
                    </MudStack>
                }
            </MudStack>
        </MudStack>
    </MudPaper>
    <div style="width: 12px" class="d-none d-md-flex d-lg-flex d-xl-flex d-xxl-flex"></div>
    <MudPaper Height="100%" Class="@(_isShowChatHistory ? "d-none" : "chat-width")"
              MinWidth="0"
              Style="background-color: transparent;flex-basis: 0">
        <MudPaper Elevation="0" Class="rounded-0" Style="height: 48px;background-color: transparent;">
            <MudToolBar Dense="true">
                <MudIconButton Class="chat-history-show" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                               Edge="Edge.Start" OnClick="ShowChatHistory"/>
                <MudText Class="chat-title">@(selectMsgGroup == null ? "新的聊天" : selectMsgGroup.Title)</MudText>
                <MudText Class="pl-1 pr-1">-</MudText>
                <MudText>@(selectAiApp?.Name ?? "")</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Mode" Color="Color.Inherit" OnClick="ChatSetting"/>
                <MudSpacer/>
            </MudToolBar>
        </MudPaper>
        <MudDivider/>
        <MudStack Spacing="1" Style="height: calc(100% - 48px)">
            <ChatMsgList Class="pt-1 mt-1" Items="@_chatService.MsgList" EnableLoadingState="@isLoadingMsgList"
                         Style="height: 100%">
            </ChatMsgList>
            @if (isChatMsgGenerating)
            {
                <MudStack Justify="Justify.Center" Row="true"
                          Style="height: 36.5px;margin-top: -45px;margin-bottom: 3px;">
                    <MudButton StartIcon="@Icons.Material.Filled.Stop" IconColor="Color.Warning"
                               Variant="Variant.Filled"
                               Style="width: 130px;background-color: #ffffff" OnClick="StopChatMsgGenerate">停止生成
                    </MudButton>
                </MudStack>
            }
            <MudDivider/>
            <MudPaper Elevation="0" Style="min-height: 200px; background-color: transparent;">
                <MudStack Style="height: 100%;">
                    <MudStack Spacing="1" Row="true" Style="height: 25px; flex-shrink:0;" Class="pt-1 pl-3 pr-3">
                        <MudTooltip Text="文件">
                            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Multiple="true"
                                           FilesChanged="HandleFileSelection" Style="margin-top: 0px;"
                                           Accept=".jpg,.jpeg,.png,.bmp,.gif,.doc,.docx,.pdf,.txt">
                                <ActivatorContent>
                                    <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Color="Color.Inherit"
                                                   Size="Size.Small"/>
                                </ActivatorContent>
                            </MudFileUpload>
                        </MudTooltip>
                        <MudTooltip Text="语音聊天">
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardVoice" Color="Color.Inherit"
                                           Size="Size.Small"/>
                        </MudTooltip>
                        <MudSpacer/>
                    </MudStack>

                    @if (selectedFiles.Any())
                    {
                        <MudPaper Elevation="0" Class="pl-3 pr-3 pt-1 pb-1 selected-files-container">
                            <MudStack Row="true" Spacing="1">
                                @foreach (var file in selectedFiles)
                                {
                                    <MudChip T="string" Size="Size.Small" Text="@file.Name"
                                             OnClose="@(() => RemoveSelectedFile(file))"/>
                                }
                            </MudStack>
                        </MudPaper>
                    }

                    <div class="pl-3 pr-1 pb-1 input-area-container">
                        <MudStack Class="input-msg-textarea-container">
                            <textarea id="input-msg" class="sbc input-msg input-msg-textarea"></textarea>
                            <MudStack Row="true" Justify="Justify.FlexEnd" Class="pr-2 pb-1 send-button-container">
                                <MudButton Variant="Variant.Filled" Class="send-msg-button"
                                           OnClick="SendMsgFromButtonClick"
                                           Disabled="@(!enableSend)"></MudButton>
                            </MudStack>
                        </MudStack>
                    </div>
                </MudStack>
            </MudPaper>
        </MudStack>
    </MudPaper>
</MudStack>

<MudMessageBox @ref="setTitleBox">
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText>聊天设置</MudText>
        </MudStack>
    </TitleContent>
    <MessageContent>
        <MudStack Spacing="1" Style="width: 300px;">
            <MudTextField @bind-Value="selectMsgGroup!.Title" Label=" 标题" Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Disabled="@(selectMsgGroup == null || string.IsNullOrWhiteSpace(selectMsgGroup.Id))"></MudTextField>
            <MudSelect Dense="true" Margin="Margin.Dense" @bind-Value="chatSetSelectAiApp" T="AiAppInfo" Label="AI"
                       Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var aiApp in _chatService.AiAppList)
                {
                    <MudSelectItem Value="@aiApp"/>
                }
            </MudSelect>
        </MudStack>
    </MessageContent>
    <CancelButton>
        <MudButton Variant="Variant.Filled" Class="mr-2">取消</MudButton>
    </CancelButton>
    <YesButton>
        <MudButton Variant="Variant.Filled">确定</MudButton>
    </YesButton>
</MudMessageBox>