@using MudBlazor
@using Masa.Blazor 
@using Tinvo.Abstractions.AIScheduler

<style>
    .markdown-parser__basic {
        list-style-position: inside;
    }

    .markdown-parser__basic p {
        margin-bottom: 5px;
    }

    .markdown-parser__basic img {
        width: 100%;
    }

    .wordWrap {
        white-space: pre-wrap; /* CSS 2.0 */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -hp-pre-wrap; /* HP Printers */
        word-wrap: break-word; /* IE 5+ */
    }
</style>

@if (Contents == null || Contents.Count == 0)
{
    <MudPaper Elevation="1" Class="pa-3 mt-1 mr-1" Style="@TextStyle">
        AI思考中。。。
    </MudPaper>
}
else
{
    @foreach (var item in Contents)
    {
        @if (item is AIProviderHandleTextMessageResponse textMessage)
        {
            <MudPaper Elevation="1" Class="pa-3 mt-1 mr-1" Style="@TextStyle">
                @if (IfTextUseRawText)
                {
                    <pre class="wordWrap"
                         style="font-size: initial;font-family: var(--mud-typography-default-family);">
                        @textMessage.Message
                    </pre>
                }
                else
                {
                    <MMarkdownIt Source="@textMessage.Message"
                                 Html="false"
                                 Class="markdown-parser__basic" Style="font-size: initial;" />
                }
            </MudPaper>
        }
        else if (item is AIProviderHandleCustomFileMessageResponse fileMessage)
        {
            @switch (fileMessage.Type)
            {
                case AIChatHandleMessageType.ImageMessage:
                    <FileContent FileName="@fileMessage.FileOriginalName" FileCustomID="@fileMessage.FileCustomID" Type="FileContent.FileType.Image"></FileContent>
                    break;
                case AIChatHandleMessageType.AudioMessage:
                    <FileContent FileName="@fileMessage.FileOriginalName" FileCustomID="@fileMessage.FileCustomID" Type="FileContent.FileType.Audio"></FileContent>
                    break;
                case AIChatHandleMessageType.FileMessage:
                    <FileContent FileName="@fileMessage.FileOriginalName" FileCustomID="@fileMessage.FileCustomID" Type="FileContent.FileType.Other"></FileContent>
                    break;

                default:
                    break;
            }
        }
        else if (item is AIProviderHandleRefusalMessageResponse refusalMessage)
        {
            <MMarkdownIt Source="@(refusalMessage.Refusal ?? "AI拒绝回答")"
                         Html="false"
                         Class="markdown-parser__basic" Style="font-size: initial;" />
        }
        else if (item is AIProviderHandleReasoningMessageResponse reasoningMessage)
        {
            <MudExpansionPanels>
                <MudExpansionPanel Text="思考中" Expanded="true">
                    <MMarkdownIt Source="@reasoningMessage.Message"
                                 Html="false"
                                 Class="markdown-parser__basic" Style="font-size: initial;" />
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
        else if (item is AIProviderHandleFunctionCallResponse functionCallMessage)
        {
            <MudExpansionPanels>
                <MudExpansionPanel Text="@($"功能调用：{functionCallMessage.FunctionName}")" Expanded="true">
                    <MMarkdownIt Source="@($"```参数 \r\n{JsonSerializer.Serialize(functionCallMessage.Arguments, jsonOptions)}\r\n```")"
                                 Html="false"
                                 Class="markdown-parser__basic" Style="font-size: initial;" />
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="返回" Expanded="true">
                            <ChatMsgContent Contents="@functionCallMessage.Result" IfTextUseRawText="@IfTextUseRawText" TextStyle="@TextStyle"></ChatMsgContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}

@code {
    private List<StringNumber> panel = new() { 0 };

    [Parameter] public List<IAIChatHandleMessage>? Contents { get; set; }

    [Parameter] public bool IfTextUseRawText { get; set; } = false;

    [Parameter] public string TextStyle { get; set; } = "";

    private JsonSerializerOptions jsonOptions = new JsonSerializerOptions { Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping };
}