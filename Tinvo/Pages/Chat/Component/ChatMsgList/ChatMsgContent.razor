@using MudBlazor
@using Masa.Blazor 
@inject IDialogService DialogService

<style>
    .markdown-parser__basic {
        list-style-position: inside;
    }

    .markdown-parser__basic p {
        margin-bottom: 5px;
    }

    .wordWrap {
        white-space: pre-wrap; /* CSS 2.0 */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -hp-pre-wrap; /* HP Printers */
        word-wrap: break-word; /* IE 5+ */
    }
</style>

@foreach (var item in Contents)
{
    if(item.ContentType == ChatContentType.Default)
    {
        <MudPaper Elevation="1" Class="pa-3 mt-1 mr-1" Style="@TextStyle">
            AI思考中。。。
        </MudPaper>
        continue;
    }

    var imageUrl = GetImageUrl(item.Content);

    @if (string.IsNullOrWhiteSpace(item.Title))
    {
        @switch (item.ContentType)
        {
            case ChatContentType.Image:
                <MudImage ObjectFit="ObjectFit.ScaleDown" 
                          Style="max-width: 250px; max-height:250px; cursor: pointer;"
                          Src="@imageUrl"
                          @onclick="() => OpenImagePreview(imageUrl)"
                          Elevation="25" Class="rounded-lg"/>
                break;

            case ChatContentType.File:
            case ChatContentType.Audio:
            case ChatContentType.Video:
                <FileContent Name="@item.Content"></FileContent>
                break;

            default:
                <MudPaper Elevation="1" Class="pa-3 mt-1 mr-1" Style="@TextStyle">
                    @if (IfTextUseRawText)
                    {
                        <pre class="wordWrap"
                             style="font-size: initial;font-family: var(--mud-typography-default-family);">
                            @item.Content
                        </pre>
                    }
                    else
                    {
                        <MMarkdownIt Source="@item.Content"
                                     Html="false"
                                     Class="markdown-parser__basic" Style="font-size: initial;"/>
                    }
                </MudPaper>
                break;
        }
    }
    else
    {
        <MudExpansionPanels>
            <MudExpansionPanel Text="@item.Title" Expanded="true">
                @switch (item.ContentType)
                {
                    case ChatContentType.Image:
                        <MudImage ObjectFit="ObjectFit.ScaleDown" 
                                  Style="max-width: 250px;max-height:250px; cursor: pointer;"
                                  Src="@imageUrl"
                                  @onclick="() => OpenImagePreview(imageUrl)"
                                  Elevation="25" Class="rounded-lg"/>
                        break;

                    case ChatContentType.File:
                    case ChatContentType.Audio:
                    case ChatContentType.Video:
                        <FileContent Name="@item.Content"></FileContent>
                        break;

                    default:
                        <MudPaper Elevation="1" Class="pa-3 mt-1 mr-1" Style="@TextStyle">
                            @if (IfTextUseRawText)
                            {
                                <pre class="wordWrap"
                                     style="font-size: initial;font-family: var(--mud-typography-default-family);">
                        @item.Content
                    </pre>
                            }
                            else
                            {
                                <MMarkdownIt Source="@item.Content"
                                             Html="false"
                                             Class="markdown-parser__basic" Style="font-size: initial;"/>
                            }
                        </MudPaper>
                        break;
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
}

@code {
    private List<StringNumber> panel = new() { 0 };

    [Parameter] public List<ChatMsgItemContentInfo> Contents { get; set; }

    [Parameter] public bool IfTextUseRawText { get; set; } = false;

    [Parameter] public string TextStyle { get; set; }
    
    private string GetImageUrl(string content)
    {
        if (string.IsNullOrEmpty(content)) return "";
        return content.StartsWith("http") ? content : $"data:image/png;base64,{content}";
    }

    private void OpenImagePreview(string imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl)) return;
        
        var parameters = new DialogParameters<ImagePreviewDialog>();
        parameters.Add(p => p.ImageSrc, imageUrl);
        
        var options = new DialogOptions() 
        { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Large, 
            Position = DialogPosition.Center 
        };

        DialogService.Show<ImagePreviewDialog>("", parameters, options);
    }
}